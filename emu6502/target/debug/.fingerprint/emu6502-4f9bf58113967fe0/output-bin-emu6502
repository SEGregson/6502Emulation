{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":4076,"byte_end":4077,"line_start":150,"line_end":150,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":4090,"byte_end":4091,"line_start":150,"line_end":150,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_parens)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":4076,"byte_end":4077,"line_start":150,"line_end":150,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":4090,"byte_end":4091,"line_start":150,"line_end":150,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:150:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_parens)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":4475,"byte_end":4476,"line_start":160,"line_end":160,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":4487,"byte_end":4488,"line_start":160,"line_end":160,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":4475,"byte_end":4476,"line_start":160,"line_end":160,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":4487,"byte_end":4488,"line_start":160,"line_end":160,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:160:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.x == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.x == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.x == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":4870,"byte_end":4871,"line_start":170,"line_end":170,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":4882,"byte_end":4883,"line_start":170,"line_end":170,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":4870,"byte_end":4871,"line_start":170,"line_end":170,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":4882,"byte_end":4883,"line_start":170,"line_end":170,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:170:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.y == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.y == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.y == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":6504,"byte_end":6505,"line_start":208,"line_end":208,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":6518,"byte_end":6519,"line_start":208,"line_end":208,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":6504,"byte_end":6505,"line_start":208,"line_end":208,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":6518,"byte_end":6519,"line_start":208,"line_end":208,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:208:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":6839,"byte_end":6840,"line_start":216,"line_end":216,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":6851,"byte_end":6852,"line_start":216,"line_end":216,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":6839,"byte_end":6840,"line_start":216,"line_end":216,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":6851,"byte_end":6852,"line_start":216,"line_end":216,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.y == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:216:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.y == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.y == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.y == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":7170,"byte_end":7171,"line_start":224,"line_end":224,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":7184,"byte_end":7185,"line_start":224,"line_end":224,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":7170,"byte_end":7171,"line_start":224,"line_end":224,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":7184,"byte_end":7185,"line_start":224,"line_end":224,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:224:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":7504,"byte_end":7505,"line_start":233,"line_end":233,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":7516,"byte_end":7517,"line_start":233,"line_end":233,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":7504,"byte_end":7505,"line_start":233,"line_end":233,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":7516,"byte_end":7517,"line_start":233,"line_end":233,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:233:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.x == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.x == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.x == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":7900,"byte_end":7901,"line_start":242,"line_end":242,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":7912,"byte_end":7913,"line_start":242,"line_end":242,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":7900,"byte_end":7901,"line_start":242,"line_end":242,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":7912,"byte_end":7913,"line_start":242,"line_end":242,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:242:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.x == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.x == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.x == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":8260,"byte_end":8261,"line_start":250,"line_end":250,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":8272,"byte_end":8273,"line_start":250,"line_end":250,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":8260,"byte_end":8261,"line_start":250,"line_end":250,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":8272,"byte_end":8273,"line_start":250,"line_end":250,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"                    self.z = (self.x == 0);","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:250:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.x == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.x == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.x == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":9034,"byte_end":9035,"line_start":267,"line_end":267,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":9048,"byte_end":9049,"line_start":267,"line_end":267,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":9034,"byte_end":9035,"line_start":267,"line_end":267,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":9048,"byte_end":9049,"line_start":267,"line_end":267,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:267:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":9657,"byte_end":9658,"line_start":281,"line_end":281,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":9671,"byte_end":9672,"line_start":281,"line_end":281,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":9657,"byte_end":9658,"line_start":281,"line_end":281,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":9671,"byte_end":9672,"line_start":281,"line_end":281,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:281:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10053,"byte_end":10054,"line_start":290,"line_end":290,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10067,"byte_end":10068,"line_start":290,"line_end":290,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10053,"byte_end":10054,"line_start":290,"line_end":290,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10067,"byte_end":10068,"line_start":290,"line_end":290,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:290:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10427,"byte_end":10428,"line_start":299,"line_end":299,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10441,"byte_end":10442,"line_start":299,"line_end":299,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10427,"byte_end":10428,"line_start":299,"line_end":299,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10441,"byte_end":10442,"line_start":299,"line_end":299,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:299:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10890,"byte_end":10891,"line_start":311,"line_end":311,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.c = (self.acc > 0b1111111);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10911,"byte_end":10912,"line_start":311,"line_end":311,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"                    self.c = (self.acc > 0b1111111);","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10890,"byte_end":10891,"line_start":311,"line_end":311,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.c = (self.acc > 0b1111111);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10911,"byte_end":10912,"line_start":311,"line_end":311,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"                    self.c = (self.acc > 0b1111111);","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:311:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.c = (self.acc > 0b1111111);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.c = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc > 0b1111111\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.c = self.acc > 0b1111111;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10943,"byte_end":10944,"line_start":312,"line_end":312,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10957,"byte_end":10958,"line_start":312,"line_end":312,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":10943,"byte_end":10944,"line_start":312,"line_end":312,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/hardware_structs.rs","byte_start":10957,"byte_end":10958,"line_start":312,"line_end":312,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                    self.z = (self.acc == 0);","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:312:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.z = (self.acc == 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    self.z = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mself.acc == 0\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    self.z = self.acc == 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"unused variable: `STA_AB`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2458,"byte_end":2464,"line_start":109,"line_end":109,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STA_AB: u8 = 0x85;  // Store ACC absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2458,"byte_end":2464,"line_start":109,"line_end":109,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STA_AB: u8 = 0x85;  // Store ACC absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_STA_AB","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `STA_AB`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:109:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let STA_AB: u8 = 0x85;  // Store ACC absolute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_STA_AB`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `STX_AB`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2512,"byte_end":2518,"line_start":110,"line_end":110,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STX_AB: u8 = 0x8E;  // Store X absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2512,"byte_end":2518,"line_start":110,"line_end":110,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STX_AB: u8 = 0x8E;  // Store X absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_STX_AB","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `STX_AB`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:110:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let STX_AB: u8 = 0x8E;  // Store X absolute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_STX_AB`\u001b[0m\n\n"}
{"message":"unused variable: `STY_AB`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2564,"byte_end":2570,"line_start":111,"line_end":111,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STY_AB: u8 = 0x8C;  // Store Y absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2564,"byte_end":2570,"line_start":111,"line_end":111,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STY_AB: u8 = 0x8C;  // Store Y absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_STY_AB","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `STY_AB`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:111:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let STY_AB: u8 = 0x8C;  // Store Y absolute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_STY_AB`\u001b[0m\n\n"}
{"message":"unused variable: `TAX`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2647,"byte_end":2650,"line_start":114,"line_end":114,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAX: u8 = 0xAA;     // transfer acc to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2647,"byte_end":2650,"line_start":114,"line_end":114,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAX: u8 = 0xAA;     // transfer acc to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_TAX","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `TAX`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:114:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TAX: u8 = 0xAA;     // transfer acc to x\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_TAX`\u001b[0m\n\n"}
{"message":"unused variable: `TAY`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2700,"byte_end":2703,"line_start":115,"line_end":115,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAY: u8 = 0xA8;     // transfer acc to y","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2700,"byte_end":2703,"line_start":115,"line_end":115,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAY: u8 = 0xA8;     // transfer acc to y","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_TAY","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `TAY`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:115:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TAY: u8 = 0xA8;     // transfer acc to y\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_TAY`\u001b[0m\n\n"}
{"message":"unused variable: `TXA`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2753,"byte_end":2756,"line_start":116,"line_end":116,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXA: u8 = 0x8A;     // transfer x to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2753,"byte_end":2756,"line_start":116,"line_end":116,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXA: u8 = 0x8A;     // transfer x to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_TXA","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `TXA`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:116:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TXA: u8 = 0x8A;     // transfer x to acc\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_TXA`\u001b[0m\n\n"}
{"message":"unused variable: `TYA`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2806,"byte_end":2809,"line_start":117,"line_end":117,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TYA: u8 = 0x98;     // transfer y to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2806,"byte_end":2809,"line_start":117,"line_end":117,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TYA: u8 = 0x98;     // transfer y to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_TYA","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `TYA`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:117:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TYA: u8 = 0x98;     // transfer y to acc\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_TYA`\u001b[0m\n\n"}
{"message":"unused variable: `TSX`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2888,"byte_end":2891,"line_start":120,"line_end":120,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TSX: u8 = 0xBA;     // transfer sp to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2888,"byte_end":2891,"line_start":120,"line_end":120,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TSX: u8 = 0xBA;     // transfer sp to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_TSX","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `TSX`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:120:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TSX: u8 = 0xBA;     // transfer sp to x\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_TSX`\u001b[0m\n\n"}
{"message":"unused variable: `TXS`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2940,"byte_end":2943,"line_start":121,"line_end":121,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXS: u8 = 0x9A;     // transfer x to sp","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2940,"byte_end":2943,"line_start":121,"line_end":121,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXS: u8 = 0x9A;     // transfer x to sp","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_TXS","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `TXS`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:121:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TXS: u8 = 0x9A;     // transfer x to sp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_TXS`\u001b[0m\n\n"}
{"message":"unused variable: `PHA`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2992,"byte_end":2995,"line_start":122,"line_end":122,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHA: u8 = 0x48;     // push acc onto stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2992,"byte_end":2995,"line_start":122,"line_end":122,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHA: u8 = 0x48;     // push acc onto stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_PHA","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `PHA`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:122:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PHA: u8 = 0x48;     // push acc onto stack\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_PHA`\u001b[0m\n\n"}
{"message":"unused variable: `PHP`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3047,"byte_end":3050,"line_start":123,"line_end":123,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHP: u8 = 0x08;     // push process status to stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3047,"byte_end":3050,"line_start":123,"line_end":123,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHP: u8 = 0x08;     // push process status to stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_PHP","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `PHP`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:123:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PHP: u8 = 0x08;     // push process status to stack\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_PHP`\u001b[0m\n\n"}
{"message":"unused variable: `PLA`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3111,"byte_end":3114,"line_start":124,"line_end":124,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLA: u8 = 0x68;     // pull from stack to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3111,"byte_end":3114,"line_start":124,"line_end":124,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLA: u8 = 0x68;     // pull from stack to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_PLA","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `PLA`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:124:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PLA: u8 = 0x68;     // pull from stack to acc\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_PLA`\u001b[0m\n\n"}
{"message":"unused variable: `PLP`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3169,"byte_end":3172,"line_start":125,"line_end":125,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLP: u8 = 0x28;     // pull process status from stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3169,"byte_end":3172,"line_start":125,"line_end":125,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLP: u8 = 0x28;     // pull process status from stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_PLP","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `PLP`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:125:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PLP: u8 = 0x28;     // pull process status from stack\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_PLP`\u001b[0m\n\n"}
{"message":"unused variable: `AND_IM`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3266,"byte_end":3272,"line_start":128,"line_end":128,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let AND_IM: u8 = 0x29;  // bitwise AND immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3266,"byte_end":3272,"line_start":128,"line_end":128,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let AND_IM: u8 = 0x29;  // bitwise AND immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_AND_IM","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `AND_IM`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:128:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let AND_IM: u8 = 0x29;  // bitwise AND immidiate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_AND_IM`\u001b[0m\n\n"}
{"message":"unused variable: `EOR_IM`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3323,"byte_end":3329,"line_start":129,"line_end":129,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let EOR_IM: u8 = 0x49;  // bitwise XOR immidiate (why does it have to be EOR not XOR?)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3323,"byte_end":3329,"line_start":129,"line_end":129,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let EOR_IM: u8 = 0x49;  // bitwise XOR immidiate (why does it have to be EOR not XOR?)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_EOR_IM","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `EOR_IM`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:129:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let EOR_IM: u8 = 0x49;  // bitwise XOR immidiate (why does it have to be EOR not XOR?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_EOR_IM`\u001b[0m\n\n"}
{"message":"unused variable: `ORA_IM`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3418,"byte_end":3424,"line_start":130,"line_end":130,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let ORA_IM: u8 = 0x09;  // bitwise OR immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3418,"byte_end":3424,"line_start":130,"line_end":130,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let ORA_IM: u8 = 0x09;  // bitwise OR immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_ORA_IM","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `ORA_IM`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:130:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let ORA_IM: u8 = 0x09;  // bitwise OR immidiate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_ORA_IM`\u001b[0m\n\n"}
{"message":"unused variable: `BIT_AB`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3474,"byte_end":3480,"line_start":131,"line_end":131,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let BIT_AB: u8 = 0x2C;  // bit test absolute (needs research)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3474,"byte_end":3480,"line_start":131,"line_end":131,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let BIT_AB: u8 = 0x2C;  // bit test absolute (needs research)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_BIT_AB","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `BIT_AB`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:131:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let BIT_AB: u8 = 0x2C;  // bit test absolute (needs research)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_BIT_AB`\u001b[0m\n\n"}
{"message":"field is never read: `i`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":865,"byte_end":872,"line_start":43,"line_end":43,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    i: bool,            // Interupt Disable","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `i`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:43:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    i: bool,            // Interupt Disable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"field is never read: `d`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":909,"byte_end":916,"line_start":44,"line_end":44,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    d: bool,            // Decimal Mode Flag","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `d`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:44:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    d: bool,            // Decimal Mode Flag\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `b`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":954,"byte_end":961,"line_start":45,"line_end":45,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    b: bool,            // Break Command","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `b`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    b: bool,            // Break Command\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `v`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":995,"byte_end":1002,"line_start":46,"line_end":46,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    v: bool,            // Overflow Flag","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `v`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:46:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    v: bool,            // Overflow Flag\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"variable `STA_AB` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2458,"byte_end":2464,"line_start":109,"line_end":109,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STA_AB: u8 = 0x85;  // Store ACC absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2458,"byte_end":2464,"line_start":109,"line_end":109,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STA_AB: u8 = 0x85;  // Store ACC absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"sta_ab","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `STA_AB` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:109:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let STA_AB: u8 = 0x85;  // Store ACC absolute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `sta_ab`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"variable `STX_AB` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2512,"byte_end":2518,"line_start":110,"line_end":110,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STX_AB: u8 = 0x8E;  // Store X absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2512,"byte_end":2518,"line_start":110,"line_end":110,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STX_AB: u8 = 0x8E;  // Store X absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"stx_ab","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `STX_AB` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:110:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let STX_AB: u8 = 0x8E;  // Store X absolute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `stx_ab`\u001b[0m\n\n"}
{"message":"variable `STY_AB` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2564,"byte_end":2570,"line_start":111,"line_end":111,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STY_AB: u8 = 0x8C;  // Store Y absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2564,"byte_end":2570,"line_start":111,"line_end":111,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let STY_AB: u8 = 0x8C;  // Store Y absolute","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"sty_ab","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `STY_AB` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:111:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let STY_AB: u8 = 0x8C;  // Store Y absolute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `sty_ab`\u001b[0m\n\n"}
{"message":"variable `TAX` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2647,"byte_end":2650,"line_start":114,"line_end":114,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAX: u8 = 0xAA;     // transfer acc to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2647,"byte_end":2650,"line_start":114,"line_end":114,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAX: u8 = 0xAA;     // transfer acc to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"tax","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TAX` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:114:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TAX: u8 = 0xAA;     // transfer acc to x\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `tax`\u001b[0m\n\n"}
{"message":"variable `TAY` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2700,"byte_end":2703,"line_start":115,"line_end":115,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAY: u8 = 0xA8;     // transfer acc to y","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2700,"byte_end":2703,"line_start":115,"line_end":115,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TAY: u8 = 0xA8;     // transfer acc to y","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"tay","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TAY` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:115:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TAY: u8 = 0xA8;     // transfer acc to y\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `tay`\u001b[0m\n\n"}
{"message":"variable `TXA` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2753,"byte_end":2756,"line_start":116,"line_end":116,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXA: u8 = 0x8A;     // transfer x to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2753,"byte_end":2756,"line_start":116,"line_end":116,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXA: u8 = 0x8A;     // transfer x to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"txa","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TXA` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:116:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TXA: u8 = 0x8A;     // transfer x to acc\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `txa`\u001b[0m\n\n"}
{"message":"variable `TYA` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2806,"byte_end":2809,"line_start":117,"line_end":117,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TYA: u8 = 0x98;     // transfer y to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2806,"byte_end":2809,"line_start":117,"line_end":117,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TYA: u8 = 0x98;     // transfer y to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"tya","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TYA` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:117:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TYA: u8 = 0x98;     // transfer y to acc\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `tya`\u001b[0m\n\n"}
{"message":"variable `TSX` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2888,"byte_end":2891,"line_start":120,"line_end":120,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TSX: u8 = 0xBA;     // transfer sp to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2888,"byte_end":2891,"line_start":120,"line_end":120,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TSX: u8 = 0xBA;     // transfer sp to x","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"tsx","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TSX` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:120:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TSX: u8 = 0xBA;     // transfer sp to x\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `tsx`\u001b[0m\n\n"}
{"message":"variable `TXS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2940,"byte_end":2943,"line_start":121,"line_end":121,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXS: u8 = 0x9A;     // transfer x to sp","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2940,"byte_end":2943,"line_start":121,"line_end":121,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let TXS: u8 = 0x9A;     // transfer x to sp","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"txs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TXS` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:121:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let TXS: u8 = 0x9A;     // transfer x to sp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `txs`\u001b[0m\n\n"}
{"message":"variable `PHA` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2992,"byte_end":2995,"line_start":122,"line_end":122,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHA: u8 = 0x48;     // push acc onto stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":2992,"byte_end":2995,"line_start":122,"line_end":122,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHA: u8 = 0x48;     // push acc onto stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"pha","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PHA` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:122:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PHA: u8 = 0x48;     // push acc onto stack\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `pha`\u001b[0m\n\n"}
{"message":"variable `PHP` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3047,"byte_end":3050,"line_start":123,"line_end":123,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHP: u8 = 0x08;     // push process status to stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3047,"byte_end":3050,"line_start":123,"line_end":123,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PHP: u8 = 0x08;     // push process status to stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"php","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PHP` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:123:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PHP: u8 = 0x08;     // push process status to stack\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `php`\u001b[0m\n\n"}
{"message":"variable `PLA` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3111,"byte_end":3114,"line_start":124,"line_end":124,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLA: u8 = 0x68;     // pull from stack to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3111,"byte_end":3114,"line_start":124,"line_end":124,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLA: u8 = 0x68;     // pull from stack to acc","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"pla","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PLA` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:124:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PLA: u8 = 0x68;     // pull from stack to acc\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `pla`\u001b[0m\n\n"}
{"message":"variable `PLP` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3169,"byte_end":3172,"line_start":125,"line_end":125,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLP: u8 = 0x28;     // pull process status from stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3169,"byte_end":3172,"line_start":125,"line_end":125,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PLP: u8 = 0x28;     // pull process status from stack","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"plp","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PLP` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:125:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let PLP: u8 = 0x28;     // pull process status from stack\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `plp`\u001b[0m\n\n"}
{"message":"variable `AND_IM` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3266,"byte_end":3272,"line_start":128,"line_end":128,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let AND_IM: u8 = 0x29;  // bitwise AND immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3266,"byte_end":3272,"line_start":128,"line_end":128,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let AND_IM: u8 = 0x29;  // bitwise AND immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"and_im","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AND_IM` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:128:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let AND_IM: u8 = 0x29;  // bitwise AND immidiate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `and_im`\u001b[0m\n\n"}
{"message":"variable `EOR_IM` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3323,"byte_end":3329,"line_start":129,"line_end":129,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let EOR_IM: u8 = 0x49;  // bitwise XOR immidiate (why does it have to be EOR not XOR?)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3323,"byte_end":3329,"line_start":129,"line_end":129,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let EOR_IM: u8 = 0x49;  // bitwise XOR immidiate (why does it have to be EOR not XOR?)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"eor_im","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `EOR_IM` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:129:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let EOR_IM: u8 = 0x49;  // bitwise XOR immidiate (why does it have to be EOR not XOR?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `eor_im`\u001b[0m\n\n"}
{"message":"variable `ORA_IM` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3418,"byte_end":3424,"line_start":130,"line_end":130,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let ORA_IM: u8 = 0x09;  // bitwise OR immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3418,"byte_end":3424,"line_start":130,"line_end":130,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let ORA_IM: u8 = 0x09;  // bitwise OR immidiate","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"ora_im","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `ORA_IM` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:130:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let ORA_IM: u8 = 0x09;  // bitwise OR immidiate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ora_im`\u001b[0m\n\n"}
{"message":"variable `BIT_AB` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3474,"byte_end":3480,"line_start":131,"line_end":131,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let BIT_AB: u8 = 0x2C;  // bit test absolute (needs research)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/hardware_structs.rs","byte_start":3474,"byte_end":3480,"line_start":131,"line_end":131,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let BIT_AB: u8 = 0x2C;  // bit test absolute (needs research)","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"bit_ab","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `BIT_AB` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/hardware_structs.rs:131:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let BIT_AB: u8 = 0x2C;  // bit test absolute (needs research)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `bit_ab`\u001b[0m\n\n"}
{"message":"53 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 53 warnings emitted\u001b[0m\n\n"}
